#include "estimatorMethods.h"

namespace Patch{

    template<typename IteratorType>
    void curvatureEstimation(IteratorType itb,
                             IteratorType ite,
                             std::vector<double>& estimations)
    {
        if(Development::lambdaEstimator)
        {
            estimationsLambdaMDCACurvature(itb,ite,estimations);
        }else if(Development::pessimistEstimator)
        {
            estimationsPessimistMDCACurvature(itb,ite,estimations);
        }
        else
        {
            estimationsMCMDCACurvature(itb,ite,estimations);
        }
    }


    template<typename IteratorType>
    void tangentEstimation(IteratorType itb,
                           IteratorType ite,
                           std::vector< TangentVector >& estimations)
    {
        if(Development::lambdaEstimator)
        {
            //Not good results. Does not work with circulators
            //estimationsLambdaMDSSTangent(itb,ite,estimations);
            estimationsMCMDSSTangent(itb,ite,estimations);
        }else if(Development::pessimistEstimator)
        {
            //TODO:: Implement a Pessimist version for the tangent
            estimationsMCMDSSTangent(itb,ite,estimations);
        }else
        {
            estimationsMCMDSSTangent(itb,ite,estimations);
        }
    }


    template<typename IteratorType>
    void estimationsPessimistMDCACurvature(IteratorType itb,
                                           IteratorType ite,
                                           std::vector<double>& estimations)
    {
        // Lambda Maximal Digital Circle Arcs Curvature Estimator
        typedef DGtal::StabbingCircleComputer<IteratorType> SegmentComputer;
        typedef DGtal::CurvatureFromDCAEstimator<SegmentComputer, false> SCEstimator;

        SegmentComputer sc;
        SCEstimator f;

        Patch::PessimistMaximalSegmentEstimator<SegmentComputer,SCEstimator> PessimistMDCACurvature(sc,f);

        PessimistMDCACurvature.init(1.0,itb,ite);

        PessimistMDCACurvature.eval(itb,ite,std::back_inserter(estimations));
    }


    template<typename IteratorType>
    void estimationsLambdaMDCACurvature(IteratorType itb,
                                        IteratorType ite,
                                        std::vector<double>& estimations)
    {
        // Lambda Maximal Digital Circle Arcs Curvature Estimator
        typedef DGtal::StabbingCircleComputer<IteratorType> SegmentComputer;
        typedef DGtal::CurvatureFromDCAEstimator<SegmentComputer, false> SCEstimator;
//        typedef Patch::Lambda16Function LambdaFunction;
        typedef DGtal::functors::Lambda64Function LambdaFunction;

        SegmentComputer sc;
        SCEstimator f;

        Patch::LambdaMaximalSegmentEstimator<SegmentComputer,SCEstimator, LambdaFunction> LambdaMDCACurvature(sc,f);

        LambdaMDCACurvature.init(1.0,itb,ite);

        LambdaMDCACurvature.eval(itb,ite,std::back_inserter(estimations));
    }

    template<typename IteratorType>
    void estimationsMCMDCACurvature(IteratorType itb,
                                    IteratorType ite,
                                    std::vector<double>& estimations)
    {
        //Most Centered Maximal Digital Circle Arcs Curvature Estimator
        typedef DGtal::StabbingCircleComputer<IteratorType> SegmentComputer;
        typedef DGtal::CurvatureFromDCAEstimator<SegmentComputer, false> SCEstimator;

        SegmentComputer sc;
        SCEstimator f;

        DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,SCEstimator> MCMDCACurvatureEstimator(sc,f);

        MCMDCACurvatureEstimator.init(1.0,itb,ite);
        MCMDCACurvatureEstimator.eval(itb,ite,std::back_inserter(estimations));
    }


    template<typename IteratorType>
    void estimationsLambdaMDSSTangent(IteratorType itb,
                                      IteratorType ite,
                                      std::vector< TangentVector >& estimations)
    {
        //Lambda Maximal Digital Straight Segment Tangent Estimator



        //I suspect that LambdaMST2DEstimator does not accept Circulators
        std::vector<Point> noCirculator;
        auto tempIt = itb;
        do{
            noCirculator.push_back(*tempIt);
            ++tempIt;
        }while(tempIt!=ite);

        typedef DGtal::ArithmeticalDSSComputer< std::vector<Point>::const_iterator, int, 4 > SegmentComputer;
        typedef SaturatedSegmentation<SegmentComputer> Segmentation;
        typedef DGtal::functors::Lambda64Function LambdaFunction;

        LambdaMST2D < Segmentation > lmst;
        Segmentation segmenter ( noCirculator.begin(), noCirculator.end(), SegmentComputer() );
        lmst.attach ( segmenter );


        lmst.init ( noCirculator.begin(), noCirculator.end() );
        lmst.eval( noCirculator.begin(), noCirculator.end(),  std::back_inserter ( estimations ) );
    }


    template<typename IteratorType>
    void estimationsMCMDSSTangent(IteratorType itb,
                                  IteratorType ite,
                                  std::vector< TangentVector >& estimations)
    {
        //Most Centered Maximal Digital Straight Segment Tangent Estimator
        typedef DGtal::ArithmeticalDSSComputer< IteratorType, int, 4 > SegmentComputer;
        typedef DGtal::TangentFromDSSEstimator<SegmentComputer> SCEstimator;

        SegmentComputer sc;
        SCEstimator f;

        DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,SCEstimator> MCMDSSTangentEstimator(sc,f);

        MCMDSSTangentEstimator.init(1.0,itb,ite);
        MCMDSSTangentEstimator.eval(itb,ite,std::back_inserter(estimations));
    }

}